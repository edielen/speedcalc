#!/bin/bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

# debug ... uncomment following line to put this script in debug mode
# set -x

function error() {
  echo " !     $*" >&2
  exit 1
}

function topic() {
    YELLOW='\033[1;33m'
    RESET='\033[0m'
    echo -e "${YELLOW}===========================" | indent
    echo -e "${RESET}-----> $*" | indent
    echo -e "${YELLOW}===========================${RESET}" | indent
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

function setBaseFolders()
{
APT_SOURCES_DIR="$CACHE_DIR/apt"
mkdir -p  "$APT_SOURCES_DIR"
rm -fR $APT_SOURCES_DIR
APT_CACHE_DIR="$CACHE_DIR/apt/cache"
APT_STATE_DIR="$CACHE_DIR/apt/state"
mkdir -p  "$BUILD_DIR"
mkdir -p  "$APT_CACHE_DIR"
mkdir -p  "$APT_STATE_DIR"
mkdir -p  "$APT_CACHE_DIR/archives"
mkdir -p  "$APT_STATE_DIR/lists"
mkdir -p  "$APT_CACHE_DIR/archives/partial"
mkdir -p  "$APT_STATE_DIR/lists/partial"
topic "Writing profile script"
mkdir -p  $BUILD_DIR/.profile.d

export PATH="$BUILD_DIR/usr/bin:$BUILD_DIR/usr/lib/R:$BUILD_DIR/usr/lib/R/bin:$BUILD_DIR/usr/lib/R/etc:$BUILD_DIR/.profile.d:$BUILD_DIR/usr/lib/gcc/x86_64-linux-gnu/4.8:$PATH"
export LD_LIBRARY_PATH="$BUILD_DIR/usr/lib/x86_64-linux-gnu:$BUILD_DIR/usr/lib:$BUILD_DIR/usr/lib/R/library:$BUILD_DIR/usr/lib/lapack:$BUILD_DIR/usr/lib/libblas:$LD_LIBRARY_PATH"
export LIBRARY_PATH="$BUILD_DIR/usr/lib/x86_64-linux-gnu:$BUILD_DIR/usr/lib/i386-linux-gnu:$BUILD_DIR/usr/lib:$BUILD_DIR/usr/lib/R/library:$BUILD_DIR/usr/lib/lapack:$BUILD_DIR/usr/lib/libblas:$LIBRARY_PATH"
export INCLUDE_PATH="$BUILD_DIR/usr/include:$BUILD_DIR/usr/include/c++/4.8/trl:$BUILD_DIR/usr/include/c++/4.8:$BUILD_DIR/usr/include/x86_64-linux-gnu/c++/4.8:$BUILD_DIR/usr/lib/gcc/x86_64-linux-gnu/4.8/finclude:$BUILD_DIR/usr/share/R/include:$BUILD_DIR/usr/include/x86_64-linux-gnu/openssl:$INCLUDE_PATH"
export C_INCLUDE_PATH="$INCLUDE_PATH"
export CPATH="$INCLUDE_PATH"
export CPPPATH="$INCLUDE_PATH"
export CPLUS_INCLUDE_PATH="$INCLUDE_PATH"
export LDFLAGS="-L$BUILD_DIR/usr/lib -L$BUILD_DIR/usr/lib/R/lib "
export PKG_CONFIG_PATH="$BUILD_DIR/usr/lib/x86_64-linux-gnu/pkgconfig:$BUILD_DIR/usr/lib/i386-linux-gnu/pkgconfig:$BUILD_DIR/usr/lib/pkgconfig:$PKG_CONFIG_PATH"
export R_HOME="$BUILD_DIR/usr/lib/R"
export R_LIBS="$BUILD_DIR/usr/lib/R/library"
export R_SHARE_DIR="$BUILD_DIR/usr/share/R/share"
export R_INCLUDE_DIR="$BUILD_DIR/usr/share/R/include"
export R_DOC_DIR="$BUILD_DIR/usr/share/R/doc"
export R_LIBS_SITE="$BUILD_DIR/usr/lib/R/site-library"
export R_LIBS_USER="$BUILD_DIR/usr/lib/R/r-library"
export RHOME=$R_HOME

export BUILD_DIR
}

function set_aptOptions()
{
topic "in set_aptOptions: PWD is $PWD"
APT_OPTIONS="-o debug::nolocking=true -o Dir::Cache=$APT_CACHE_DIR -o Dir::Cache::Archives=$APT_CACHE_DIR/archives -o Dir::State::Lists=$APT_STATE_DIR/lists -o Dir::State=$APT_STATE_DIR -o Dir::Etc::SourceList=$APT_SOURCES_DIR/sources.list -o Dir::Etc::SourceParts=$APT_CACHE_DIR/sources.list.d/ -o Dir::Etc::Parts=$APT_CACHE_DIR/apt.conf.d/ --allow-unauthenticated"
cp -v app/install/sources.list --no-preserve=mode,ownership $APT_SOURCES_DIR
echo "deb http://cran.rstudio.com/bin/linux/ubuntu trusty/" >> $APT_SOURCES_DIR/sources.list
}

function displayVars()
{
ls -alHR $APT_CACHE_DIR/
topic "working directory = $(pwd)"
topic "BUILD_DIR = $BUILD_DIR"
topic "CACHE_DIR = $CACHE_DIR"
topic "APT_CACHE_DIR = $APT_CACHE_DIR"
topic "APT_STATE_DIR = $APT_STATE_DIR"
topic "APT_SOURCES_DIR = $APT_SOURCES_DIR"
topic "APT_OPTIONS = $APT_OPTIONS"
topic "PATH = $PATH"
topic "BUILDPACK_DIR = $BUILDPACK_DIR"
topic "LP_DIR = $LP_DIR"
topic "PWD = $PWD"
topic "list apt options: $APT_OPTIONS"
topic "PATH = $PATH"
topic "LIBRARY_PATH = $LIBRARY_PATH"
topic "LD_LIBRARY_PATH = $LD_LIBRARY_PATH"
topic "INCLUDE_PATH = $INCLUDE_PATH"

}

function do_aptGet()
{
topic "attempting apt-get update"
apt-get $APT_OPTIONS update
topic "attempting apt-get install debian-archive-keyring"
apt-get $APT_OPTIONS -y -d install debian-archive-keyring
do_DebInstall
apt-get $APT_OPTIONS -y -d -f install --reinstall\
 gcc-4.8-base gcc-4.8 cpp-4.8 gfortran-4.8 libgfortran-4.8-dev libgfortran3 g++-4.8 gcc-4.8-multilib libx32gcc-4.8-dev\
 libssl-dev libgcc-4.8-dev libblas3 liblapack3 libblas-dev liblapack-dev libgfortran3\
 r-base

echo "deb http://http.us.debian.org/debian jessie main/" >> $APT_SOURCES_DIR/sources.list
topic "attempting apt-get update with debian in place"
apt-get $APT_OPTIONS update
apt-get $APT_OPTIONS -y -d -f install --reinstall\
 libcurl4-openssl-dev libkrb5-dev libldap2-dev krb5-multidev libldap-2.4-2 comerr-dev libcomerr2

topic "listing contents of $APT_CACHE_DIR/archives/"
ls -alH $APT_CACHE_DIR/archives/
}

function do_DebInstall()
{
for DEB in $(ls -1 $APT_CACHE_DIR/archives/*.deb); do
   topic "Installing $(basename $DEB)"
   dpkg -x --root="$BUILD_DIR" $DEB $BUILD_DIR/
 done
}

function do_install_R()
{
topic "create user library folder for R"
MY_LIB="$R_HOME/r_library"
if [ ! -d "$MY_LIB" ]; then
  mkdir -p  $MY_LIB
fi
if [ ! -d "$R_HOME/site-library" ]; then
  mkdir -p  $R_HOME/site-library
fi

topic "prevent warnings"
mkdir -p  $BUILD_DIR/usr/lib/doc/html
touch $BUILD_DIR/usr/lib/doc/html/R.css
pwd

cp -fv app/install/r_environment.sh $BUILD_DIR/.profile.d/r_environment.sh
cp -fv app/install/Renviron $BUILD_DIR/etc/R/Renviron
cp -fv app/install/Renviron.site $BUILD_DIR/etc/R/Renviron.site
cp -fv app/install/R $BUILD_DIR/usr/bin/R
cp -fv app/install/R $BUILD_DIR/usr/lib/R/bin/R
cp -fv app/install/init.r $BUILD_DIR

topic "remove symbolic links in R/etc"
pushd $BUILD_DIR/usr/lib/R/etc/
topic "listing R/etc"
ls -alH
rm -r ldpaths
rm -r Makeconf
rm -r Renviron
rm -r Renviron.site
rm -r repositories
rm -r Rprofile.site
topic "verifying removal of symbolic links"
ls -alH
popd
topic "create new symbolic links in R/etc using pwd = $PWD"
ln -s $BUILD_DIR/etc/R/ldpaths $BUILD_DIR/usr/lib/R/etc/
ln -s $BUILD_DIR/etc/R/Makeconf $BUILD_DIR/usr/lib/R/etc/
ln -s $BUILD_DIR/etc/R/Renviron $BUILD_DIR/usr/lib/R/etc/
ln -s $BUILD_DIR/etc/R/Renviron.site $BUILD_DIR/usr/lib/R/etc/
ln -s $BUILD_DIR/etc/R/repositories $BUILD_DIR/usr/lib/R/etc/
ln -s $BUILD_DIR/etc/R/Rprofile.site $BUILD_DIR/usr/lib/R/etc/
topic "verifying creation of new symbolic links"
pushd $BUILD_DIR/usr/lib/R/etc/
ls -alH
popd
topic "completing R setup"
topic "copying openssl include"
cp -f $BUILD_DIR/usr/include/x86_64-linux-gnu/openssl/opensslconf.h $BUILD_DIR/usr/include/openssl/

topic "checking for g++"
which g++
g++ -v
topic "checking for gfortran"
which gfortran
gfortran -v
topic "checking for gcc"
which gcc
gcc -v
topic "LD_LIBRARY_PATH = $LD_LIBRARY_PATH"
topic "LIBRARY_PATH = $LIBRARY_PATH"
topic "starting R -s script"
R -s <<RPROG
   Sys.setenv(BUILD_DIR="$BUILD_DIR")
   print("Sys.setenv complete")
   setwd("$BUILD_DIR")
   print(Sys.getenv())
   print(getwd())
   print("r.home is: ")
   print(R.home())
   print("r.home(bin) is:")
   print(R.home("bin"))
   print("file.path(r.home(bin), exec) is: ")
   print(file.path(R.home("bin"), "exec"))
   print("changing working directory")
# setwd(file.path(R.home("bin"), "exec"))
   print(getwd())
   print("setwd complete")
   r <- getOption("repos");
   print(r)
   print("setting r complete")
   r["CRAN"] <- "$CRAN_MIRROR";
   print("setting r[CRAN] complete")
   options(repos=r);
   print("options(repos=r) complete")
   print("initiating cat init.r")
   `cat $BUILD_DIR/install/init.r`
   print("cat init.r complete")
RPROG
}

# initialization
topic "set up R buildpack with apt-get fix."
## comment out following lines when using with real cloud foundry
# define foundation names for use in local install
BUILD_DIR=$1
# topic "listing $BUILD_DIR"
# ls -alHR $BUILD_DIR
CACHE_DIR=$2
# topic "listing $CACHE_DIR"
# ls -alHR $CACHE_DIR
## end of comment-out section
LP_DIR=`cd $(dirname $0); cd ..; pwd`
BUILDPACK_DIR="$(dirname $(dirname $0))"
PWD=$(pwd)
topic "PWD set at initialization is $PWD"
# set up folder structure for buildpack build
setBaseFolders
# set apt-get options for buildpack build
set_aptOptions
# display variables in play for this build
displayVars
# update apt and get identified packages
do_aptGet
# install packages
do_DebInstall
topic "create symbolic link for gcc"
if [ ! -f "$BUILD_DIR/usr/bin/gcc" ]; then
  rm -f $BUILD_DIR/usr/bin/gcc
  ln -s  $BUILD_DIR/usr/bin/gcc-4.8 $BUILD_DIR/usr/bin/gcc
fi
topic "create symbolic link for g++"
  if [ ! -f "$BUILD_DIR/usr/bin/g++" ]; then
    rm -f $BUILD_DIR/usr/bin/g++
    ln -s  $BUILD_DIR/usr/bin/g++-4.8 $BUILD_DIR/usr/bin/g++
  fi
topic "create symbolic link for gfortran"
  if [ ! -f "$BUILD_DIR/usr/bin/gfortran" ]; then
    rm -f $BUILD_DIR/usr/bin/gfortran
    ln -s  $BUILD_DIR/usr/bin/gfortran-4.8 $BUILD_DIR/usr/bin/gfortran
  fi
# install R
do_install_R
topic "end of R Buildpack install."
